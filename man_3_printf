.\" Manpage for _printf.
.\" Contact 5154@holberton.com to correct errors or typos.
.TH man 8 "11 July 2022" "1.0" "_printf man page"
.SH NAME
_printf \- formatted output conversion 
.SH SYNOPSIS
.B int _printf(const char *restrict format, ...);
.SH DESCRIPTION
_printf() produces output (written to stdout) according to a format. This function writes the output under the control of a format string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of stdarg(3)) are converted for output.
.SS Format of the format string
The format string is a character string, beginning and ending in its initial shift state, if any.  The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.  Each conversion specification is introduced by the character %, and ends with a conversion specifier.
.PP Like so
.RS _print("%d", 210)
.SS Conversion specifiers
A character that specifies the type of conversion to be applied. The conversion specifiers and their meanings are:
.IP "d, i"
The int argument is converted to signed decimal notation. The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.  The default precision is 1.  When 0 is printed with an explicit precision 0, the output is empty.
.IP c
If no l modifier is present, the int argument is converted to an unsigned char, and the resulting character is written.
.IP s
If no l modifier is present: the const char * argument is expected to be a pointer to an array of character type (pointer to a string).  Characters from the array are written up to (but not including) a terminating null byte ('\0').
.SH BUGS
Code such as _printf(foo); often indicates a bug, since foo may contain a % character.  If foo comes from untrusted user input, it may contain %n, causing the _printf() call to write to memory and creating a security hole.
.SH SEE ALSO
printf(3)
